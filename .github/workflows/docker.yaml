name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  ALIYUN_REGISTRY_BASE_PATH: "${{ secrets.ALIYUN_REGISTRY_BASE_PATH }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: read-yaml-file
      uses: pietrobolcato/action-read-yaml@1.1.0
      id: yaml
      with:
        config: ${{ github.workspace }}/build.yaml
    - name: Calculate array length using loop
      id: loop_length
      run: |
        echo first permission name: ${{ steps.permissions.outputs['0.name'] }}
        echo first permission permissions: ${{ steps.permissions.outputs['0.permission'] }}
        echo second permission name: ${{ steps.permissions.outputs['1.name'] }}
        echo second permission permissions: ${{ steps.permissions.outputs['1.permission'] }}
        echo
        env | grep "myEnv_"
        echo
        for i in 0 1
        do
          name="myEnv_${i}_name"
          permission="myEnv_${i}_permission"
          echo first permission name: $(eval "echo \${$name}")
          echo first permission permissions: $(eval "echo \${$permission}")

        done
#        # Initialize the length counter
#        LENGTH=0
#        # Loop through the array and count elements
#        while true
#        do
#          name="myEnv_images_${LENGTH}_image"
#          if [ -z "$(eval "echo \${$name}")" ]; then
#              break
#          fi
#          LENGTH=$((LENGTH+1))
#        done


#        echo "Array length is: $LENGTH"

        # Set output variable for length
        echo "::set-output name=length::$LENGTH"
#
#    - name: Use the array length
#      run: |
#        echo "The length of the array is ${{ steps.loop_length.outputs.length }}"
#    - name: Build and push image Aliyun
#      run: |
#        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
#        # 数据预处理,判断镜像是否重名
#        declare -A duplicate_images
#        declare -A temp_map
#
#
#        while IFS= read -r line || [ -n "$line" ]; do
#            # 忽略空行与注释
#            [[ -z "$line" ]] && continue
#            if echo "$line" | grep -q '^\s*#'; then
#                continue
#            fi
#
#            echo "docker pull $line"
#            docker pull $line
#
#            image=$(echo "$line" | awk '{print $NF}')
#            echo "image: $image"
#
#            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$ALIYUN_REGISTRY_BASE_PATH/$image"
#            echo "docker tag $image $new_image"
#            docker tag $image $new_image
#            echo "docker push $new_image"
#            docker push $new_image
#            echo "开始清理磁盘空间"
#            echo "=============================================================================="
#            df -hT
#            echo "=============================================================================="
#            docker rmi $image
#            docker rmi $new_image
#            echo "磁盘空间清理完毕"
#            echo "=============================================================================="
#            df -hT
#            echo "=============================================================================="
#
#        done < images.txt
#
#    - name: Build docker file push image Aliyun
#      run: |
#        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
#        tag=$(date "+%Y%m%d%H%M%S")
#        #4位随机数
#        rand=$(cat /proc/sys/kernel/random/uuid | cut -b 1-4)
#        tag=$tag-$rand
#
#        while IFS= read -r line || [ -n "$line" ]; do
#            # 忽略空行与注释
#            [[ -z "$line" ]] && continue
#            if echo "$line" | grep -q '^\s*#'; then
#                continue
#            fi
#
#            echo "docker pull $line"
#            # 进到目录 docker build -t $line .
#            image=$(echo "$line" | awk '{print $NF}'):$tag
#            cd dockerfile/$line && docker build -t $image .
#
#            echo "image: $image"
#
#            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$ALIYUN_REGISTRY_BASE_PATH/$image"
#            echo "docker tag $image $new_image"
#            docker tag $image $new_image
#            echo "docker push $new_image"
#            docker push $new_image
#            echo "开始清理磁盘空间"
#            echo "=============================================================================="
#            df -hT
#            echo "=============================================================================="
#            docker rmi $image
#            docker rmi $new_image
#            echo "磁盘空间清理完毕"
#            echo "=============================================================================="
#            df -hT
#            echo "=============================================================================="
#
#        done < dockerfile.txt